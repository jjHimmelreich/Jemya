name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  ECR_REPOSITORY: jemya
  APP_NAME: jemya
  AWS_DEFAULT_REGION: eu-west-1

jobs:
  # 🏗️ Build Docker Image Once (SINGLE SOURCE OF TRUTH)
  build-image:
    name: 🏗️ Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.APP_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and export Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        tags: ${{ steps.meta.outputs.tags }}
        outputs: type=docker,dest=/tmp/image.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 📦 Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar
        retention-days: 1

  # 🔍 Security and Code Quality Scans (using the built image)
  security-scans:
    name: 🛡️ Code Security Scans
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # 🔍 Static Application Security Testing (SAST) with CodeQL
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-extended,security-and-quality

    - name: 🔍 Perform CodeQL Vulnerabilities Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

    # 🐍 Python Security Scanning with Bandit
    - name: 🔒 Install Python security tools
      run: |
        pip install bandit[toml] pip-audit semgrep

    - name: 🔒 Run Bandit security scan
      run: |
        # Generate reports first (non-blocking)
        # Bandit will automatically use .bandit config file
        bandit -c .bandit -r . -f json -o bandit-report.json --severity-level low || true
        
        # Fail only on HIGH severity issues
        echo "🔍 Checking for HIGH+ severity security issues..."
        bandit -c .bandit -r . -f txt --severity-level high
      continue-on-error: false

    - name: 🔒 Run dependency vulnerability scan (pip-audit primary)
      run: |
        # Safety CLI now requires registration - use pip-audit as primary tool
        # Note: pip-audit doesn't provide severity grades (HIGH/CRITICAL) like other tools
        # We use vulnerability count thresholds and critical pattern detection instead
        echo "🔍 Running dependency vulnerability scan with pip-audit..."
        
        # Primary vulnerability scan with pip-audit (PyPA maintained, no registration required)
        pip-audit --format=json --output=safety-report.json --vulnerability-service osv || echo "pip-audit scan completed with findings"
        
        # Also generate pip-audit report for artifacts
        pip-audit --format=json --output=pip-audit-report.json --vulnerability-service osv || echo "pip-audit report generated"
        
        # Check for vulnerability count and critical patterns
        echo "🔍 Checking dependency vulnerabilities..."
        
        # Count total vulnerabilities (excluding ignored ones)
        VULN_COUNT=$(pip-audit \
          --vulnerability-service osv \
          --ignore-vuln GHSA-xh9p-4q96-pfv9 \
          --ignore-vuln GHSA-jh85-wwv9-wp87 \
          --format=columns 2>/dev/null | grep -c "^[^-].*GHSA\|^[^-].*CVE\|^[^-].*PYSEC" || echo "0")
        
        echo "� Found $VULN_COUNT vulnerabilities (after exclusions)"
        
        # Check for critical vulnerability patterns (RCE, injection, etc.)
        CRITICAL_PATTERNS=$(pip-audit \
          --vulnerability-service osv \
          --ignore-vuln GHSA-xh9p-4q96-pfv9 \
          --ignore-vuln GHSA-jh85-wwv9-wp87 \
          --format=columns 2>/dev/null | grep -i -E "(execution|injection|overflow|bypass|privilege|escalation)" | wc -l || echo "0")
        
        echo "⚠️ Found $CRITICAL_PATTERNS critical-pattern vulnerabilities"
        
        # Fail on critical patterns or excessive vulnerabilities
        if [ "$CRITICAL_PATTERNS" -gt 0 ]; then
          echo "❌ Critical vulnerability patterns found - failing build"
          pip-audit --vulnerability-service osv --format=columns | grep -i -E "(execution|injection|overflow|bypass|privilege|escalation)" || true
          exit 1
        elif [ "$VULN_COUNT" -gt 50 ]; then
          echo "❌ Too many vulnerabilities ($VULN_COUNT > 50 threshold) - failing build"
          echo "💡 Consider updating dependencies or adding more specific ignores"
          exit 1
        else
          echo "✅ Vulnerability count acceptable ($VULN_COUNT vulnerabilities, no critical patterns)"
          echo "📋 Vulnerabilities are tracked but not blocking (threshold: 50)"
        fi
      continue-on-error: false

    # 📦 Upload security scan results
    - name: 📦 Upload security scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  # 🐳 Docker Security Scanning (using the built image)
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: 🐳 Load Docker image
      run: |
        docker load --input /tmp/image.tar
        docker image ls -a

    # 🔍 Dockerfile Security Scanning with Hadolint
    - name: 🐳 Run Hadolint Dockerfile scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: 📦 Upload Hadolint results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-results.sarif') != ''
      with:
        sarif_file: hadolint-results.sarif
      continue-on-error: true

    # 🔍 Container Vulnerability Scanning with Trivy - Full Report
    - name: 🔍 Run Trivy vulnerability scanner (report generation)
      run: |
        echo "🔍 Installing Trivy..."
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -1)
        echo "🔍 Scanning image: $IMAGE_NAME"
        
        # Generate SARIF report for GitHub Security
        trivy image --format sarif --output trivy-results.sarif "$IMAGE_NAME" || true
      continue-on-error: true

    - name: 📦 Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: trivy-results.sarif
      continue-on-error: true

    # 🔍 Show HIGH+ vulnerabilities for review
    - name: 🔍 Show HIGH+ vulnerabilities (for debugging)
      run: |
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -1)
        echo "🔍 Scanning for HIGH+ vulnerabilities in Docker image: $IMAGE_NAME"
        trivy image --format table --severity HIGH,CRITICAL --ignore-unfixed "$IMAGE_NAME" || echo "⚠️ HIGH+ vulnerabilities found - see details above"
      continue-on-error: true

    # 🔍 Container Vulnerability Scanning with Trivy - Security Gate
    - name: 🔍 Run Trivy security gate (CRITICAL only)
      run: |
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -1)
        echo "🔍 Running security gate on image: $IMAGE_NAME"
        trivy image --severity CRITICAL --ignore-unfixed "$IMAGE_NAME"
      continue-on-error: false

    # 🔍 Additional Trivy scans
    - name: � Run Trivy filesystem scan
      run: |
        echo "🔍 Running Trivy filesystem scan..."
        trivy fs --format sarif --output trivy-fs-results.sarif . || true
      continue-on-error: true

    - name: 📦 Upload Trivy filesystem results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-fs-results.sarif') != ''
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-filesystem'
      continue-on-error: true

  # 🧪 Test (using the built image)
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    needs: [build-image, security-scans, docker-security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: 🐳 Load Docker image
      run: |
        docker load --input /tmp/image.tar
        docker image ls -a

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: 🧹 Code formatting check
      run: |
        echo "🎨 Checking code formatting..."
        # Check main application files (exclude aws, tools, archives, and cache directories)
        black --check --exclude="(aws|tools|ZZZ.*|__pycache__)/" . || echo "⚠️ Code formatting issues found - consider running 'black .' locally"
        isort --check-only --skip-glob="aws/*" --skip-glob="tools/*" --skip-glob="ZZZ*" --skip-glob="__pycache__" . || echo "⚠️ Import sorting issues found - consider running 'isort .' locally"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude="aws,tools,ZZZ*,__pycache__" || echo "⚠️ Some code quality issues found"
        echo "✅ Code quality check completed (formatting issues are non-blocking)"
      continue-on-error: true

    - name: 🧪 Run tests
      run: |
        echo "🧪 Application Tests"
        echo "==================="
        echo "📋 No application tests configured yet"
        echo "💡 Consider adding unit tests for:"
        echo "   • Spotify API integration"
        echo "   • OpenAI API integration" 
        echo "   • Playlist generation logic"
        echo "   • User authentication flow"
        echo "✅ Test placeholder completed"

    # 🧪 Test Docker image
    - name: 🧪 Test Docker image
      run: |
        IMAGE_NAME=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -1)
        echo "🧪 Testing Docker image: $IMAGE_NAME"
        
        # Test that the image can start (basic smoke test)
        docker run -d --name test-container -p 8501:8501 \
          -e SPOTIFY_CLIENT_ID=test \
          -e SPOTIFY_CLIENT_SECRET=test \
          -e SPOTIFY_REDIRECT_URI=https://test.com/callback \
          -e OPENAI_API_KEY=test \
          -e ENVIRONMENT=production \
          "$IMAGE_NAME"
        
        # Wait for container to start and check health
        sleep 15
        
        # Check if container is still running (didn't crash)
        if ! docker ps | grep test-container > /dev/null; then
          echo "❌ Container failed to start or crashed"
          docker logs test-container || true
          exit 1
        fi
        
        echo "✅ Container started successfully"
        docker logs test-container --tail 20
        docker stop test-container

  # 🚀 Push to ECR (for deployment)
  push-to-ecr:
    name: 🚀 Push to ECR
    runs-on: ubuntu-latest
    needs: [build-image, security-scans, docker-security, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: 🔐 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: 📥 Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp

    - name: 🐳 Load and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Load the image
        docker load --input /tmp/image.tar
        
        # Get the locally built image name
        LOCAL_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | head -1)
        echo "📦 Local image: $LOCAL_IMAGE"
        
        # Tag for ECR
        docker tag "$LOCAL_IMAGE" $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag "$LOCAL_IMAGE" $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "✅ Pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
        # Set output for deployment workflow
        echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # 📊 CI Summary  
  ci-summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [build-image, security-scans, docker-security, test, push-to-ecr]
    if: always()
    
    steps:
    - name: 📊 Generate CI Pipeline Summary
      run: |
        echo "## 🔄 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall status
        if [ "${{ needs.build-image.result }}" = "success" ] && \
           [ "${{ needs.security-scans.result }}" = "success" ] && \
           [ "${{ needs.docker-security.result }}" = "success" ] && \
           [ "${{ needs.test.result }}" = "success" ]; then
          
          echo "### ✅ CI Pipeline Passed" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **All checks passed successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # ECR push status (only on main branch)
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ needs.push-to-ecr.result }}" = "success" ]; then
              echo "### 📦 Docker Image Published" >> $GITHUB_STEP_SUMMARY
              echo "✅ **Image successfully pushed to ECR**" >> $GITHUB_STEP_SUMMARY
              echo "🏷️ **Image Tag**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
              echo "🌍 **ECR Region**: \`${{ env.AWS_DEFAULT_REGION }}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🚀 Ready for Deployment" >> $GITHUB_STEP_SUMMARY
              echo "🎯 **Automatic deployment** will trigger shortly" >> $GITHUB_STEP_SUMMARY
              echo "📋 **Manual deployment**: Use the 'Deploy to Production' workflow" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ❌ ECR Push Failed" >> $GITHUB_STEP_SUMMARY
              echo "❌ **Failed to push Docker image to ECR**" >> $GITHUB_STEP_SUMMARY
              echo "🔍 **Check the ECR push logs above for details**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### 📦 Docker Image Ready" >> $GITHUB_STEP_SUMMARY
            echo "🔨 **Docker image built and tested successfully**" >> $GITHUB_STEP_SUMMARY
            echo "📝 **ECR push skipped** (only runs on main branch pushes)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "### ❌ CI Pipeline Failed" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Some checks failed - deployment blocked**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Failed Jobs:" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.build-image.result }}" != "success" ] && echo "- ❌ Build Image: ${{ needs.build-image.result }}" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.security-scans.result }}" != "success" ] && echo "- ❌ Security Scans: ${{ needs.security-scans.result }}" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.docker-security.result }}" != "success" ] && echo "- ❌ Docker Security: ${{ needs.docker-security.result }}" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.test.result }}" != "success" ] && echo "- ❌ Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          [ "${{ needs.push-to-ecr.result }}" != "success" ] && [ "${{ needs.push-to-ecr.result }}" != "skipped" ] && echo "- ❌ ECR Push: ${{ needs.push-to-ecr.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Pipeline Details" >> $GITHUB_STEP_SUMMARY
        echo "🏗️ **Build**: ${{ needs.build-image.result }}" >> $GITHUB_STEP_SUMMARY
        echo "🛡️ **Security Scans**: ${{ needs.security-scans.result }}" >> $GITHUB_STEP_SUMMARY
        echo "🐳 **Docker Security**: ${{ needs.docker-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "🧪 **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **ECR Push**: ${{ needs.push-to-ecr.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Completed**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "👤 **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "🌿 **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
