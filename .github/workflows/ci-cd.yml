name: 🚀 CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  ECR_REPOSITORY: jemya
  APP_NAME: jemya
  AWS_DEFAULT_REGION: eu-west-1

jobs:
  # 🔍 Security and Code Quality Scans
  security-scans:
    name: 🛡️ Security Scans
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # 🔍 Static Application Security Testing (SAST) with CodeQL
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-extended,security-and-quality

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

    # 🐍 Python Security Scanning with Bandit
    - name: 🔒 Install Python security tools
      run: |
        pip install bandit[toml] pip-audit semgrep

    - name: 🔒 Run Bandit security scan
      run: |
        # Generate reports first (non-blocking)
        # Bandit will automatically use .bandit config file
        bandit -c .bandit -r . -f json -o bandit-report.json --severity-level low || true
        
        # Fail only on HIGH severity issues
        echo "🔍 Checking for HIGH+ severity security issues..."
        bandit -c .bandit -r . -f txt --severity-level high
      continue-on-error: false

    - name: 🔒 Run dependency vulnerability scan (pip-audit primary)
      run: |
        # Safety CLI now requires registration - use pip-audit as primary tool
        # Note: pip-audit doesn't provide severity grades (HIGH/CRITICAL) like other tools
        # We use vulnerability count thresholds and critical pattern detection instead
        echo "🔍 Running dependency vulnerability scan with pip-audit..."
        
        # Primary vulnerability scan with pip-audit (PyPA maintained, no registration required)
        pip-audit --format=json --output=safety-report.json --vulnerability-service osv || echo "pip-audit scan completed with findings"
        
        # Also generate pip-audit report for artifacts
        pip-audit --format=json --output=pip-audit-report.json --vulnerability-service osv || echo "pip-audit report generated"
        
        # Check for vulnerability count and critical patterns
        echo "🔍 Checking dependency vulnerabilities..."
        
        # Count total vulnerabilities (excluding ignored ones)
        VULN_COUNT=$(pip-audit \
          --vulnerability-service osv \
          --ignore-vuln GHSA-xh9p-4q96-pfv9 \
          --ignore-vuln GHSA-jh85-wwv9-wp87 \
          --format=columns 2>/dev/null | grep -c "^[^-].*GHSA\|^[^-].*CVE\|^[^-].*PYSEC" || echo "0")
        
        echo "� Found $VULN_COUNT vulnerabilities (after exclusions)"
        
        # Check for critical vulnerability patterns (RCE, injection, etc.)
        CRITICAL_PATTERNS=$(pip-audit \
          --vulnerability-service osv \
          --ignore-vuln GHSA-xh9p-4q96-pfv9 \
          --ignore-vuln GHSA-jh85-wwv9-wp87 \
          --format=columns 2>/dev/null | grep -i -E "(execution|injection|overflow|bypass|privilege|escalation)" | wc -l || echo "0")
        
        echo "⚠️ Found $CRITICAL_PATTERNS critical-pattern vulnerabilities"
        
        # Fail on critical patterns or excessive vulnerabilities
        if [ "$CRITICAL_PATTERNS" -gt 0 ]; then
          echo "❌ Critical vulnerability patterns found - failing build"
          pip-audit --vulnerability-service osv --format=columns | grep -i -E "(execution|injection|overflow|bypass|privilege|escalation)" || true
          exit 1
        elif [ "$VULN_COUNT" -gt 50 ]; then
          echo "❌ Too many vulnerabilities ($VULN_COUNT > 50 threshold) - failing build"
          echo "💡 Consider updating dependencies or adding more specific ignores"
          exit 1
        else
          echo "✅ Vulnerability count acceptable ($VULN_COUNT vulnerabilities, no critical patterns)"
          echo "📋 Vulnerabilities are tracked but not blocking (threshold: 50)"
        fi
      continue-on-error: false

    # 📦 Upload security scan results
    - name: 📦 Upload security scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  # 🐳 Docker Security Scanning
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 🔍 Dockerfile Security Scanning with Hadolint
    - name: 🐳 Run Hadolint Dockerfile scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: 📦 Upload Hadolint results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-results.sarif') != ''
      with:
        sarif_file: hadolint-results.sarif
      continue-on-error: true

    # 🏗️ Build Docker image for scanning
    - name: 🏗️ Build Docker image
      run: |
        docker build -t ${{ env.APP_NAME }}:latest .
        
        # Show image details for debugging
        echo "📊 Docker image details:"
        docker images ${{ env.APP_NAME }}:latest
        echo "📦 Image layers and size:"
        docker history ${{ env.APP_NAME }}:latest --no-trunc

    # 🔍 Container Vulnerability Scanning with Trivy - Full Report
    - name: 🔍 Run Trivy vulnerability scanner (report generation)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.APP_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'  # Generate report without failing
      continue-on-error: true

    # 🔍 Show HIGH+ vulnerabilities for review
    - name: 🔍 Show HIGH+ vulnerabilities (for debugging)
      run: |
        echo "🔍 Scanning for HIGH+ vulnerabilities in Docker image..."
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /tmp/trivy:/root/.cache/trivy \
          aquasecurity/trivy:latest image \
          --format table \
          --severity HIGH,CRITICAL \
          --ignore-unfixed \
          ${{ env.APP_NAME }}:latest || echo "⚠️ HIGH+ vulnerabilities found - see details above"
      continue-on-error: true

    # 🔍 Container Vulnerability Scanning with Trivy - Security Gate
    - name: 🔍 Run Trivy security gate (HIGH+ only)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.APP_NAME }}:latest'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail build on HIGH+ vulnerabilities
        ignore-unfixed: true  # Only fail on fixable vulnerabilities

    - name: 📦 Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-image'
      continue-on-error: true

    # 🔍 Additional Trivy scans
    - name: 🔍 Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
      continue-on-error: true

    - name: 📦 Upload Trivy filesystem results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-fs-results.sarif') != ''
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-filesystem'
      continue-on-error: true

  # 🧪 Build and Test
  build-and-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    needs: [security-scans, docker-security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: 🧹 Code formatting check
      run: |
        echo "🎨 Checking code formatting..."
        # Check main application files (exclude aws, tools, archives, and cache directories)
        black --check --exclude="(aws|tools|ZZZ.*|__pycache__)/" . || echo "⚠️ Code formatting issues found - consider running 'black .' locally"
        isort --check-only --skip-glob="aws/*" --skip-glob="tools/*" --skip-glob="ZZZ*" --skip-glob="__pycache__" . || echo "⚠️ Import sorting issues found - consider running 'isort .' locally"
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude="aws,tools,ZZZ*,__pycache__" || echo "⚠️ Some code quality issues found"
        echo "✅ Code quality check completed (formatting issues are non-blocking)"
      continue-on-error: true

    # - name: 🧪 Run tests
    #   run: |
    #     pytest --cov=. --cov-report=xml --cov-report=html

    # 🐳 Build and test Docker image
    - name: 🐳 Build Docker image
      run: |
        docker build -t ${{ env.APP_NAME }}:${{ github.sha }} .

    # 🧪 Test Docker image
    - name: 🧪 Test Docker image
      run: |
        # Test that the image can start (basic smoke test)
        # Uses simplified configuration system with environment variables
        # Start container and test it actually works
        docker run -d --name test-container -p 8501:8501 \
          -e SPOTIFY_CLIENT_ID=test \
          -e SPOTIFY_CLIENT_SECRET=test \
          -e SPOTIFY_REDIRECT_URI=https://test.com/callback \
          -e OPENAI_API_KEY=test \
          -e ENVIRONMENT=production \
          ${{ env.APP_NAME }}:${{ github.sha }}
        
        # Wait for container to start and check health
        sleep 15
        
        # Check if container is still running (didn't crash)
        if ! docker ps | grep test-container > /dev/null; then
          echo "❌ Container failed to start or crashed"
          docker logs test-container || true
          exit 1
        fi
        
        echo "✅ Container started successfully"
        docker logs test-container --tail 20
        docker stop test-container

  # 🚀 Deploy to AWS
  deploy:
    name: 🚀 Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 🏷️ Login to Amazon ECR
    - name: 🏷️ Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 🏗️ Build, tag, and push image to Amazon ECR
    - name: 🏗️ Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # � Auto-discover EC2 instance for deployment
    - name: � Discover EC2 Instance
      id: discover-ec2
      run: |
        echo "🔍 Auto-discovering Jemya EC2 instance..."
        
        # Find running Jemya instance by tag
        INSTANCE_INFO=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=jemya-instance" \
                    "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].[InstanceId,PublicIpAddress,PrivateIpAddress]' \
          --output text \
          --region ${{ env.AWS_DEFAULT_REGION }})
        
        if [ "$INSTANCE_INFO" = "None	None	None" ] || [ -z "$INSTANCE_INFO" ]; then
          echo "❌ No running Jemya EC2 instance found!"
          echo "💡 Make sure your EC2 instance is running and tagged with Name=jemya-instance"
          exit 1
        fi
        
        # Parse instance info with better error handling
        INSTANCE_ID=$(echo "$INSTANCE_INFO" | cut -d$'\t' -f1)
        PUBLIC_IP=$(echo "$INSTANCE_INFO" | cut -d$'\t' -f2)
        PRIVATE_IP=$(echo "$INSTANCE_INFO" | cut -d$'\t' -f3)
        
        echo "✅ Found Jemya EC2 instance:"
        echo "   Instance ID: '$INSTANCE_ID'"
        echo "   Public IP: '$PUBLIC_IP'"
        echo "   Private IP: '$PRIVATE_IP'"
        
        # Validate parsed values
        if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "None" ]; then
          echo "❌ Invalid Instance ID: '$INSTANCE_ID'"
          exit 1
        fi
        
        if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "None" ]; then
          echo "❌ Invalid Public IP: '$PUBLIC_IP'"
          exit 1
        fi
        
        # Set outputs for next steps
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
        echo "private_ip=$PRIVATE_IP" >> $GITHUB_OUTPUT
        

        # Check if we have SSH key for deployment
        if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
          echo "❌ EC2_SSH_KEY secret not found!"
          echo "💡 Please add EC2_SSH_KEY to GitHub secrets to enable deployment"
          exit 1
        else
          echo "✅ SSH key available for deployment"
        fi


    # 🚀 Deploy to Auto-Discovered EC2 Instance via SSH
    - name: 🚀 Deploy to EC2 Instance
      run: |
        # Get and validate variables
        INSTANCE_ID="${{ steps.discover-ec2.outputs.instance_id }}"
        PUBLIC_IP="${{ steps.discover-ec2.outputs.public_ip }}"
        
        echo "🚀 Deploying to EC2 instance:"
        echo "   Instance ID: '$INSTANCE_ID'"
        echo "   Public IP: '$PUBLIC_IP'"
        
        # Additional validation
        if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "None" ]; then
          echo "❌ Invalid PUBLIC_IP: '$PUBLIC_IP'"
          exit 1
        fi

        # Write and validate SSH key
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem
        
        # Validate SSH key format
        ssh-keygen -y -f ec2_key.pem > /dev/null
        echo "✅ SSH key is valid"
        
        # Test network connectivity
        echo "🌐 Testing network connectivity to $PUBLIC_IP:22..."
        nc -zv "$PUBLIC_IP" 22
        echo "✅ Port 22 is accessible"

        # Create deployment script
        cat > deploy_script.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "Deploying Jemya to EC2..."
        
        # ECR login
        aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
        
        # Stop and remove existing container
        docker stop jemya-app || true
        docker rm jemya-app || true
        
        # Pull new image
        echo "Pulling Docker image..."
        docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        
        # Run new container
        echo "Starting new container..."
        docker run -d \
          --name jemya-app \
          -p 8501:8501 \
          --restart unless-stopped \
          -e SPOTIFY_CLIENT_ID="${{ secrets.SPOTIFY_CLIENT_ID }}" \
          -e SPOTIFY_CLIENT_SECRET="${{ secrets.SPOTIFY_CLIENT_SECRET }}" \
          -e SPOTIFY_REDIRECT_URI="${{ secrets.SPOTIFY_REDIRECT_URI }}" \
          -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          -e ENVIRONMENT="production" \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        
        # Restart nginx if available
        sudo systemctl restart nginx || echo "Nginx not available (using Docker networking)"
        
        echo "Deployment completed successfully"
        EOF

        # Copy and execute deployment script via SSH
        echo "📤 Copying deployment script to EC2..."
        scp -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes deploy_script.sh ec2-user@"$PUBLIC_IP":/tmp/
        
        echo "🚀 Executing deployment on EC2..."
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ec2-user@"$PUBLIC_IP" << 'EOF'
        chmod +x /tmp/deploy_script.sh
        /tmp/deploy_script.sh
        exit 0
        EOF

        # Cleanup
        rm -f ec2_key.pem deploy_script.sh
        echo "🎉 Deployment to EC2 completed successfully!"
        
        # Verify deployment
        echo "🔍 Verifying deployment..."
        curl -f --connect-timeout 10 "http://$PUBLIC_IP:8501/health" || echo "⚠️ Health check endpoint not available (this is normal if no health endpoint exists)"

    # 📊 Deployment Summary
    - name: 📊 Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Docker Image Built & Pushed" >> $GITHUB_STEP_SUMMARY
        echo "� **Image URI**: \`${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "🏷️ **Tag**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "🌍 **Region**: \`${{ env.AWS_DEFAULT_REGION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Always show SSH deployment since we have the SSH key
        echo "### ☁️ EC2 Deployment (SSH Auto-Deploy)" >> $GITHUB_STEP_SUMMARY
        echo "🆔 **Instance**: \`${{ steps.discover-ec2.outputs.instance_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **IP**: \`${{ steps.discover-ec2.outputs.public_ip }}\`" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **App URL**: \`http://${{ steps.discover-ec2.outputs.public_ip }}:8501\` (Direct Docker access)" >> $GITHUB_STEP_SUMMARY
        echo "🔄 **Alternative**: \`https://${{ steps.discover-ec2.outputs.public_ip }}\` (if Nginx configured)" >> $GITHUB_STEP_SUMMARY
        echo "🐳 **Container**: jemya-app running on port 8501" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Status**: Successfully deployed via SSH" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **CI/CD Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY

  # 📋 Security Summary
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [security-scans, docker-security]
    if: always()
    
    steps:
    - name: 📥 Download security artifacts
      uses: actions/download-artifact@v4
      with:
        name: security-scan-results
      continue-on-error: true

    - name: 📋 Security scan summary
      run: |
        echo "## 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Static Analysis (CodeQL)" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub CodeQL analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- Results available in Security tab" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐍 Python Security (Bandit)" >> $GITHUB_STEP_SUMMARY
        if [ -f bandit-report.json ]; then
          echo "- Bandit scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Bandit scan: ⚠️ Results not available" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Dependency Security" >> $GITHUB_STEP_SUMMARY
        if [ -f pip-audit-report.json ]; then
          echo "- pip-audit vulnerability scan completed (primary)" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f safety-report.json ]; then
          echo "- Additional dependency scan reports available" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Container Security (Trivy)" >> $GITHUB_STEP_SUMMARY
        echo "- Docker image vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- Dockerfile security scan (Hadolint) completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **All security results are available in the Security tab**"