name: 🚀 CI/CD Pipeline with Security Scans

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  ECR_REPOSITORY: jemya
  APP_NAME: jemya

jobs:
  # 🔍 Security and Code Quality Scans
  security-scans:
    name: 🛡️ Security Scans
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # 🔍 Static Application Security Testing (SAST) with CodeQL
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        queries: security-extended,security-and-quality

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

    # 🐍 Python Security Scanning with Bandit
    - name: 🔒 Install Python security tools
      run: |
        pip install bandit[toml] safety pip-audit semgrep

    - name: 🔒 Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt || true
      continue-on-error: true

    - name: 🔒 Run Safety dependency vulnerability scan
      run: |
        safety scan --output json > safety-report.json 2>/dev/null || echo "Safety scan completed with warnings"
        safety scan --output screen || echo "Safety scan completed"
      continue-on-error: true

    - name: 🔒 Run pip-audit for dependency vulnerabilities
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit || true
      continue-on-error: true

    # 📦 Upload security scan results
    - name: 📦 Upload security scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  # 🐳 Docker Security Scanning
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 🔍 Dockerfile Security Scanning with Hadolint
    - name: 🐳 Run Hadolint Dockerfile scan
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: 📦 Upload Hadolint results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-results.sarif') != ''
      with:
        sarif_file: hadolint-results.sarif
      continue-on-error: true

    # 🏗️ Build Docker image for scanning
    - name: 🏗️ Build Docker image
      run: |
        docker build -t ${{ env.APP_NAME }}:latest .

    # 🔍 Container Vulnerability Scanning with Trivy
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.APP_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📦 Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    # 🔍 Additional Trivy scans
    - name: 🔍 Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
      continue-on-error: true

    - name: 📦 Upload Trivy filesystem results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-fs-results.sarif') != ''
      with:
        sarif_file: 'trivy-fs-results.sarif'
      continue-on-error: true

  # 🧪 Build and Test
  build-and-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    needs: [security-scans, docker-security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort

    - name: 🧹 Code formatting check
      run: |
        black --check .
        isort --check-only .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: 🧪 Run tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html || true

    # 🐳 Build and test Docker image
    - name: 🐳 Build Docker image
      run: |
        docker build -t ${{ env.APP_NAME }}:${{ github.sha }} .

    # 🧪 Test Docker image
    - name: 🧪 Test Docker image
      run: |
        # Test that the image can start (basic smoke test)
        # Uses simplified configuration system with environment variables
        docker run --rm -d --name test-container -p 8501:8501 \
          -e SPOTIFY_CLIENT_ID=test \
          -e SPOTIFY_CLIENT_SECRET=test \
          -e SPOTIFY_REDIRECT_URI=https://test.com/callback \
          -e OPENAI_API_KEY=test \
          -e ENVIRONMENT=production \
          ${{ env.APP_NAME }}:${{ github.sha }} &
        sleep 10
        docker logs test-container
        docker stop test-container || true

  # 🚀 Deploy to AWS
  deploy:
    name: 🚀 Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ⚙️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 🏷️ Login to Amazon ECR
    - name: 🏷️ Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # 🏗️ Build, tag, and push image to Amazon ECR
    - name: 🏗️ Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # 🚀 Deploy to AWS App Runner
    - name: 🚀 Deploy to AWS App Runner
      run: |
        # Create or update App Runner service
        aws apprunner update-service \
          --service-arn ${{ secrets.APP_RUNNER_SERVICE_ARN }} \
          --source-configuration '{
            "ImageRepository": {
              "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
              "ImageConfiguration": {
                "Port": "8501",
                "RuntimeEnvironmentVariables": {
                  "SPOTIFY_CLIENT_ID": "${{ secrets.SPOTIFY_CLIENT_ID }}",
                  "SPOTIFY_CLIENT_SECRET": "${{ secrets.SPOTIFY_CLIENT_SECRET }}",
                  "SPOTIFY_REDIRECT_URI": "${{ secrets.SPOTIFY_REDIRECT_URI }}",
                  "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}",
                  "ENVIRONMENT": "production"
                }
              },
              "ImageRepositoryType": "ECR"
            },
            "AutoDeploymentsEnabled": false
          }' || echo "Service update failed, attempting to create service..."

    # 📊 Deployment status
    - name: 📊 Check deployment status
      run: |
        echo "🚀 Deployment completed!"
        echo "🔗 App Runner service: ${{ secrets.APP_RUNNER_SERVICE_ARN }}"
        echo "📦 Docker image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"

  # 📋 Security Summary
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [security-scans, docker-security]
    if: always()
    
    steps:
    - name: 📥 Download security artifacts
      uses: actions/download-artifact@v4
      with:
        name: security-scan-results
      continue-on-error: true

    - name: 📋 Security scan summary
      run: |
        echo "## 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Static Analysis (CodeQL)" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub CodeQL analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- Results available in Security tab" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐍 Python Security (Bandit)" >> $GITHUB_STEP_SUMMARY
        if [ -f bandit-report.json ]; then
          echo "- Bandit scan completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Bandit scan: ⚠️ Results not available" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Dependency Security" >> $GITHUB_STEP_SUMMARY
        if [ -f safety-report.json ]; then
          echo "- Safety vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f pip-audit-report.json ]; then
          echo "- pip-audit scan completed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Container Security (Trivy)" >> $GITHUB_STEP_SUMMARY
        echo "- Docker image vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- Dockerfile security scan (Hadolint) completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **All security results are available in the Security tab**"